// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not remove parameter decorators 1`] = `
"
  import { Component, Inject } from '@angular/core';
  import { MAT_DIALOG_DATA } from '@angular/material/dialog';

  @Component({
    template: '',
    styles: ['']
  })
  export class SomeComponent {
    constructor(
      @Inject(MAT_DIALOG_DATA)
      public dialogData
    ) { }
  }
  "
`;

exports[`preserves imports of JSX type parameters 1`] = `
"
  import { SomeComponent } from './some-path';  
  import { SomeType } from './another-path';

  const App = () => {
    return <SomeComponent<SomeType> />;
  };
  "
`;

exports[`preserves specified import identifiers 1`] = `
"
  import { React, useState } from 'react';
  import { SomeComponent } from './some-path';

  const App = () => {
    const [count, setCount] = useState(0);

    return <SomeComponent count={count} />;
  };
  "
`;

exports[`removes unused import specifiers and import declarations 1`] = `
"
  import 'side-effects';
  import { used } from 'package-2';
  import usedImport from 'package-3';
  import { something as alias } from 'package-4';
  import * as group from 'package-3';

  used();
  usedImport();
  alias.method();
  group.property;
  "
`;

exports[`supports TypeScript React 1`] = `
"
  import { useQuery } from \\"@apollo/client\\";
  import type { NextPage } from \\"next\\";
  import { useTranslation } from \\"react-i18next\\";
  import { NoDataFound } from \\"@/NoDataFound\\";

  import { Query, QueryFindFirstUserArgs } from \\"~/@types/generated/graphqlTypes\\";
  import { whereIdIs } from \\"~/front/gql/helpers/graphql.helpers\\";
  import { ONE_USER_QUERY } from \\"~/front/gql/queries\\";
  import { useSession } from \\"~/front/hooks\\";

  const colProps = {
    md: { span: 12 },
    span: 24,
    xl: { span: 6 },
  };

  const VideosPage: NextPage = () => {
    const { user } = useSession();
    const { t } = useTranslation();
  
    const { data } = useQuery<Query, QueryFindFirstUserArgs>(
      ONE_USER_QUERY,
      whereIdIs(user?.id),
    );
  
  
    const userData = data?.findFirstUser;
    if (!userData) {
      return <NoDataFound dataName={String(t(\\"pages.videos.no-datas\\"))} />;
    }
  
    return (
      <>
       
      </>
    );
  };

  export default VideosPage;
  "
`;

exports[`supports decorators 1`] = `
"
  import { SomeClass } from './some-path';

  @injectable()
  export class CustomClass extends SomeClass {
    constructor(@injectMapper() mapper: Mapper) {
      supper(mapper);
    }
  }
  "
`;
